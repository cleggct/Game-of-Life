#include "life.h"
#include "ui_life.h"

life::life(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::life)
{
    ui->setupUi(this);
    
    setMinimumSize(min_sz * cell_sz, min_sz * cell_sz); //set the min and max sizes of the widget
    setMaximumSize(max_sz * cell_sz, max_sz * cell_sz);
    setSizeIncrement(cell_sz, cell_sz); //the size of the window will increment by cell sizes
    
    randomize(); //randomize the cells
    
    resize(border_x * cell_sz, border_x * cell_sz); //set the size of the widget
}

void life::clear(){
    for(size_t i = 0; i < max_sz; ++i){ //iterate over all the cells
        for(size_t j = 0; j < max_sz; ++j){
            cells[i][j] = 0; //make each cell nonliving
        }
    }
}

void life::randomize(){
    std::srand(std::time(0)); //seed the random number generator
    for(size_t i = 0; i < max_sz; ++i){ //iterate over all the cells
        for(size_t j = 0; j < max_sz; ++j){
            cells[i][j] = std::rand() % 2; //set the cell to a random value
        }
    }
}

void life::nextGeneration(){
    for(size_t i = 0; i < max_sz; ++i){ //iterate over all the cells
        for(size_t j = 0; j < max_sz; ++j){
            int total = 0; //initialize a total count of the living neighbors
            
            //count the number of living neighbors
            if(cells[(i-1+max_sz)%max_sz][(j-1+max_sz)%max_sz]){ //we use these indexes to make the world wrap around at the edges
                ++total;
            }
            if(cells[(i-1+max_sz)%max_sz][(j+max_sz)%max_sz]){
                ++total;
            }
            if(cells[(i-1+max_sz)%max_sz][(j+1+max_sz)%max_sz]){
                ++total;
            }
            if(cells[(i+max_sz)%max_sz][(j-1+max_sz)%max_sz]){
                ++total;
            }
            if(cells[(i+max_sz)%max_sz][(j+1+max_sz)%max_sz]){
                ++total;
            }
            if(cells[(i+1+max_sz)%max_sz][(j-1+max_sz)%max_sz]){
                ++total;
            }
            if(cells[(i+1+max_sz)%max_sz][(j+max_sz)%max_sz]){
                ++total;
            }
            if(cells[(i+1+max_sz)%max_sz][(j+1+max_sz)%max_sz]){
                ++total;            
            }
            
            if(cells[i][j]){ //if the current cell is living
                if((total != 2) && (total != 3)){ //apply the rules
                    cells[i][j] = 0;
                }
            } else{ //the current cell is nonliving
                if(total == 3){ //apply the rules
                    cells[i][j] = 1;
                }
            }
        }
    }
}

life::~life()
{
    delete ui;
}
